/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "time.h"
#include "stdbool.h"
#include "stdio.h"
#include <stdlib.h>

int checking1 = 0;
int checking2 = 0;
int checking3 = 0;
int checking4 = 0;
int checking5 = 0;
int checking6 = 0;
int checking7 = 0;
int checking8 = 0;
int checking9 = 0;
int checking10 = 0;
int checking11 = 0;
int checking12 = 0;
int checking13 = 0;
int checking14 = 0;
int checking15 = 0;
int checking16 = 0;
int checking17 = 0;

int counter1 = 0;
volatile int diff;
volatile int tickerLeft = 0;
volatile int tickers = 0;
volatile int tickerRight = 0;
int period1 = 0;
int period2 = 0;
bool checkVelocity1 = false;
bool checkVelocity2 = false;
bool left = false;
bool right = false;
long timeStamp1;
long timeStamp2;
long timeStamp3;
long timeStamp4;
char data[20];
int pwmValueLeft = 180;
int pwmValueRight = 180;
volatile bool tickerLeftUp = false;
volatile bool tickerRightUp = false;
float distance = 0;
const float tickerDistance = 1.196946;
int direction[10];
int counter = 0;
double angle = 0;
int16_t accX;
int16_t accY;
int16_t accZ;
int16_t degX;
int16_t degY;
int16_t degZ;
double Gx = 0;
float Gy = 0;
float Gz = 0;
int isGyroWorking = 1;
double finalAngleX = 0;
double finalAngleY = 0;
double finalAngleZ = 0;
double tempAngle;
double gyroCorrectionX = 0;
double gyroCorrectionY = 0;
double gyroCorrectionZ = 0;


#define MPU6050_ADDR 0xD0
#define SMPLRT_DIV_REG 0x19
#define GYRO_CONFIG_REG 0x18
#define ACCEL_CONFIG_REG 0x1C
#define ACCEL_XOUT_H_REG 0x3B
#define TEMP_OUT_H_REG 0x41
#define GYRO_XOUT_H_REG 0x43
#define PWR_MGMT_1_REG 0x6B
#define WHO_AM_I_REG 0x75

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
void fowardTravel(int maxDistance){

	float tempDistance = (float)maxDistance * 1.0;

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);//Left Wheel
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//Left Wheel
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);//Right Wheel
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//Right Wheel

	distance = tickerRight * tickerDistance;
	checking16++;
	if(distance >=  (tempDistance * 2.2222222222)){

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);//Left Wheel
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//Left Wheel
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);//Right Wheel
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//Right Wheel

		distance = 0;
		counter++;
		checking17++;

		HAL_Delay(2000);
		tickerRight = 0;
		tickerLeft = 0;
	}

}


/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
 I2C_HandleTypeDef hi2c1;

TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

UART_HandleTypeDef huart1;
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart1_rx;
DMA_HandleTypeDef hdma_usart2_rx;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_DMA_Init(void);
static void MX_TIM10_Init(void);
static void MX_TIM3_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MPU6050_Init (void){

	uint8_t check, data;
	//checking sensor is present

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG,1, &check, 1, 1000);

	if(check == 104){//if sensor is present
		data = 0;
		//sending data to sensor to wake it up
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, 1000);

		//setting sensor sampling rate at 1K Hz
		data = 0x07;
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG , 1, &data, 1, 1000);

		//setting accelometer config
		data = 0x00;
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
		//setting gyroscopit config
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, 1000);
	}
	else{
		//cout << sensor not connected
		isGyroWorking = 0;
	}

}

void MPU6050_Read_Accel(void){

	uint8_t Rec_Data[6];
	//Reading data from accelemeter
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);

	accX = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
	accY = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
	accZ = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
}

void MPU6050_Read_Gyro(void){

	uint8_t Rec_Data[6];
	//Reading data from gyroscope
	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);

	degX = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
	degY = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
	degZ = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);

	Gx = degX/131.0;
	Gy = degY/131.0;
	Gz = degZ/131.0;

}

void MPU6050_Calibrate(int iterationNumber){

	for(int i = 0; i < iterationNumber; i++){
		HAL_Delay(1);
		MPU6050_Read_Gyro();
		gyroCorrectionX = gyroCorrectionX + Gx;
		gyroCorrectionY = gyroCorrectionY + Gy;
		gyroCorrectionZ = gyroCorrectionZ + Gz;
	}

	gyroCorrectionX = (gyroCorrectionX / iterationNumber) * -1;
	gyroCorrectionY = (gyroCorrectionY / iterationNumber) * -1;
	gyroCorrectionZ = (gyroCorrectionZ / iterationNumber) * -1;
}
int recordAngle( bool record, double lastAngle){
	double ratio = 0;

		if(record){
			MPU6050_Read_Gyro();
		    Gz = Gz + gyroCorrectionZ;
			tempAngle = Gz * 2;
			finalAngleZ += tempAngle/1000;
			counter1++;
			ratio = (finalAngleZ/lastAngle);
			if(ratio < 0){
				ratio = ratio * -1.0;
			}
			if(ratio < .500){

				return 1;
			}
			else if( ratio > .500 && ratio < .750 ){
				return 2;
			}
			else if( ratio > .750 && ratio < .950 ){
				return 3;
			}
			else if(ratio >= .950 && ratio < .950 ){

				return 4;
			}
			else if(ratio >= .950 && ratio <= .970){
				counter1++;

				if(counter1 > 1400){
					finalAngleZ = 0;
					Gz = 0;
					return 5;
				}
				else{
					return 7;
				}

			}
			else if(ratio >= .970 ){
				return 6;
			}
		}
		else{
			Gx = 0;
			finalAngleZ = 0;


			return -1;

		}



}

char buffer[1];
char charBuffer[10];
int i = 0;
int j = 0;
bool ready = false;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	HAL_UART_Receive_IT(&huart1, buffer, 1);

	if(buffer[0] != ','){
		charBuffer[i] = buffer[0];
		i++;
	}
	else if(buffer[0] == ','){
		i = 0;
		direction[j] = atoi(charBuffer);

		if(direction[j] == -4){
			j = 0;
			ready = true;
		}
		else{
			j++;
		}

		for(int x = 0; x < 10; x++){
			charBuffer[x] = 0;
		}
	}


}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

	int Dperiod = 20;
	int check = 0;
	bool turn = 1;
	bool turnRight = 1;
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_DMA_Init();
  MX_TIM10_Init();
  MX_TIM3_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
  TIM3->CCR1 = pwmValueLeft;
  TIM10->CCR1 = pwmValueRight;
  HAL_UART_Receive_IT(&huart1, buffer, 1);

  MPU6050_Init();
  HAL_Delay(1000);
  MPU6050_Calibrate(2000);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);//Left Wheel
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//Left Wheel
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);//Right Wheel
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//Right Wheel


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(isGyroWorking == 0){
		  //HAL_Delay(5000);
	  }

	  while(!ready){

	  }

	  if(direction[counter] > 0){

		  fowardTravel(direction[counter]);
		  checking15++;

	  }
	  else if(direction[counter] == -1){

		  HAL_Delay(1);
		  	  check = recordAngle(turn, 90);

		  	  if(check == 1){

		  			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);//Left Wheel
		  			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//Left Wheel

		  			  checking1++;


		  	  }
		  	  else if(check == 2){
		  		  Dperiod = Dperiod * 4;
		  		checking2++;
		  	  }
		  	  else if(check == 3){
		  		  Dperiod = Dperiod * 4;
		  		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);//Right Wheel
		  		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//Right Wheel
		  		checking3++;
		  	  }
		  	  else if(check == 4){
		  		 // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);//Right Wheel
		  		 // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//Right Wheel
		  		  Dperiod = Dperiod + 5;
		  		checking4++;
		  	  }
		  	  else if(check == 5){


		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);//Left Wheel
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//Left Wheel
		  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);//Right Wheel
		  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//Right Wheel
		  		counter++;
		  		check = 0;
		  		tickerRight = 0;
		  		tickerLeft = 0;
		  		Dperiod= 20;
		  		HAL_Delay(1000);
		  		checking5++;

		  	  }
		  	  else if(check == 6){
		  		  Dperiod = Dperiod + 5;

		  			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);//Left Wheel
		  			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);//Left Wheel
		  			checking6++;


		  	  }
		  	  else if(check == 7){
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);//Left Wheel
		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//Left Wheel
		  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);//Right Wheel
		  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//Right Wheel
		  		checking7++;
		  		tickerRight = 0;
		  		tickerLeft = 0;
		  		  HAL_Delay(5);

		  	  }

	  }
	  else if(direction[counter] == -2){


		  		  HAL_Delay(1);
		  		  	  check = recordAngle(turn, 90);

		  		  	  if(check == 1){

		  		  			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);//Right Wheel
		  		  			   HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//Right Wheel
		  		  			checking8++;

		  		  	  }
		  		  	  else if(check == 2){
		  		  		  Dperiod = Dperiod * 4;
		  		  		checking9++;
		  		  	  }
		  		  	  else if(check == 3){
		  		  		  Dperiod = Dperiod * 4;
		  		  		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);//Right Wheel
		  		  		  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//Right Wheel
		  		  		checking10++;
		  		  	  }
		  		  	  else if(check == 4){
		  		  		 // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);//Right Wheel
		  		  		 // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//Right Wheel
		  		  		  Dperiod = Dperiod + 5;
		  		  		checking11++;
		  		  	  }
		  		  	  else if(check == 5){

		  		  		  check = 0;
		  		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);//Left Wheel
		  		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//Left Wheel
		  		  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);//Right Wheel
		  		  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//Right Wheel
		  		  		counter++;
		  		  		tickerRight = 0;
		  		  		tickerLeft = 0;
		  		  		distance = 0;
		  		  		Dperiod = 20;
		  		  	checking12++;
		  		  	HAL_Delay(1000);

		  		  	  }
		  		  	  else if(check == 6){
		  		  		  Dperiod = Dperiod + 5;

		  		  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);//Right Wheel
		  		  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);//Right Wheel
		  		  		checking13++;

		  		  	  }
		  		  	  else if(check == 7){
		  		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);//Left Wheel
		  		  		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//Left Wheel
		  		  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);//Right Wheel
		  		  		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//Right Wheel
		  		  		checking14++;
		  		  		tickerRight = 0;
		  		  		tickerLeft = 0;
		  		  		  HAL_Delay(5);
		  		  		//counter--;
		  		  	  }
	  }
	  else if (direction[counter] == -4){

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);//Left Wheel
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);//Left Wheel
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);//Right Wheel
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);//Right Wheel

		  for(int i = 0; i < 10; i++){
			  direction[i] = 0;
		  }

		  counter = 0;

		  ready = false;
	  }



		if(tickerLeftUp){
		  if((tickerLeft % 2) != 0){

		  			timeStamp1 =  HAL_GetTick();

		  		}
		  		else{

		  			timeStamp2 =  HAL_GetTick();
		  		}


		  		if((tickerLeft % 2) != 0){

		  			period1 =timeStamp1 - timeStamp2;
		  			diff = timeStamp1 - timeStamp2;
		  			checkVelocity1 = true;

		  		    }
		  		    else{

		  		    	period1 = timeStamp2 - timeStamp1;
		  		    	diff = timeStamp2 - timeStamp1;
		  		    	checkVelocity1 = true;
		  		    }
		  		tickerLeftUp = false;

	  }

	  if(tickerRightUp){

		  if((tickerRight % 2) != 0){
		  		     timeStamp3 =  HAL_GetTick();
		  		   }
		  		   else{
		  		      timeStamp4 =  HAL_GetTick();
		  		   }



		  		   if((tickerRight % 2) != 0){

		  			   period2 =(timeStamp3 - timeStamp4);
		  			   checkVelocity2 = true;
		  		   }
		  		   else{

		  			   period2 =timeStamp4 - timeStamp3;
		  			   checkVelocity2 = true;
		  		   }
		  		tickerRightUp = false;
	  }

	if(period1 < Dperiod && checkVelocity1 && period1 < 200){

		pwmValueLeft -= 2 *(Dperiod - period1);

		if(pwmValueLeft > 255){
			pwmValueLeft = 255;
		}
		else if(pwmValueLeft < 100){
			pwmValueLeft = 150;
		}

		TIM3->CCR1 = pwmValueLeft;
		checkVelocity1 = false;

	}
	else if(period1 > Dperiod && checkVelocity1 && period1 < 200){
		pwmValueLeft += 2 * (period1 - Dperiod);

		if(pwmValueLeft > 255){
			pwmValueLeft = 255;
		}
		else if(pwmValueLeft < 100){
			pwmValueLeft = 150;
		}

		TIM3->CCR1 = pwmValueLeft;
		checkVelocity1 = false;
	}
	else if(checkVelocity1){
	}
	else{

	}



	if(period2 < Dperiod && checkVelocity2 && period2 < 100){

		pwmValueRight -= 2 * (Dperiod - period2);

		if(pwmValueRight > 255){
			pwmValueRight = 255;
		}
		else if(pwmValueRight < 100){
			pwmValueRight = 150;
		}

		TIM10->CCR1 = pwmValueRight;
		checkVelocity2 = false;
	}
	else if(period2 > Dperiod && checkVelocity2 && period2 < 100){
		pwmValueRight += 2 * (period2 - Dperiod);

		if(pwmValueRight > 255){
			pwmValueRight = 255;
		}
		else if(pwmValueRight < 100){
			pwmValueRight = 150;
		}

		TIM10->CCR1 = pwmValueRight;
		checkVelocity2 = false;
	}
	else if(checkVelocity2){
	}
	else{

	}


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 84;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 255;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 180;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
  htim10.Init.Prescaler = 84;
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim10.Init.Period = 255;
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 180;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB1 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){

	if(GPIO_Pin == GPIO_PIN_10){

		tickerLeft++;
        tickerLeftUp = true;


	}

	if(GPIO_Pin == GPIO_PIN_11){

		tickerRight++;
		tickerRightUp = true;

	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
